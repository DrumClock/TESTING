### printer.cfg 

###  Z-max endstop
#[gcode_button z_max]   ## -- don't change name! --   
#pin:  ^PG12   ## Motor 4         
#press_gcode:  

#########################################
##       USER HOMING SEQUENCE          
##
##    for this cfg:  
##  - Endstop position
##  - Sensorless 
##  - Dual Carriage ( IDEX printer )
##  - Z-max endstop ( safety endstop ) 
##
##   For start position send: G28 S60,180 
##
#########################################

[homing_override]

axes: z
set_position_z: 0
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
   {% set act_speed = printer.gcode_move.speed %}   

   #### INIT all TMC driver typ for stepper
   {% set driver = {} %}    
    {% for object in printer.configfile.config|sort %}
      {% if 'tmc' is in object %}     
        {% set stepper = object.split(' ')[2] if object.split(' ')[1] =='extruder_stepper' 
                    else object.split(' ')[2] if object.split(' ')[1] =='manual_stepper'
                    else object.split(' ')[1]  %}  
        {% set _dummy = driver.update({stepper : object}) %}       
       {% endif %}
     {% endfor %}  
        # {action_respond_info("Type of driver used = %s" % driver)}  
              
    ##### get user defines X/Y position for "Z probe"    
    {% set probe_pos_x = (printer.configfile.config['stepper_x'].position_max)|int / 2 - (printer.configfile.config[printer['probe'].name].x_offset)|float %}
    {% set probe_pos_y = (printer.configfile.config['stepper_y'].position_max)|int / 2 - (printer.configfile.config[printer['probe'].name].y_offset)|float %}
    {% set z_hop = 2 %}
    {% set max_z_velocity = printer.configfile.config['printer'].max_z_velocity %}

    ##### start print position - user defined 
    {% set start_pos_x =  probe_pos_x %}
    {% set start_pos_y =  probe_pos_y %}

    ##### parameter S
    {% if params.S is defined %}
      {% if  params.S.split(",")|length == 2 %}
        {% set start_pos_x = params.S.split(',')[0] %}
        {% set start_pos_y = params.S.split(',')[1] %}
      {% else %}
        RESPOND MSG="example: G28 S60,180" 
        RESPOND MSG="The START parameter is incorrectly defined, the default setting is used." 
      {% endif %}
    {% endif %}
    
    ##### get user defines sensorless homing
    {% set home_offset_x = ( (printer.configfile.config['stepper_x'].position_endstop)|int -10 ) |abs %}
    {% set home_offset_y = ( (printer.configfile.config['stepper_y'].position_endstop)|int -10 ) |abs %}
    {% set run_current_x = printer.configfile.settings[driver['stepper_x']].run_current|float %}
    {% set run_current_y = printer.configfile.settings[driver['stepper_y']].run_current|float %}
    {% set home_current = 0.600 %}     
    
    ##### get user defines sensorless homing for DUAL CARRIAGE - IDEX
    {% if 'dual_carriage' in printer['motion_report'].steppers %}   
      {% set run_current_dc = printer.configfile.settings[driver['dual_carriage']].run_current|float %}
    {% endif %}
	    
##### Z-hop befor homing - safe lift nozzle ------------------
     
     {% if 'gcode_button z_max' in printer and printer['gcode_button z_max'].state == 'PRESSED' %} 
       ## info: QUERY_BUTTON button=z_max    RELEASED / PRESSED
       ## no Z-hop befor homing if Z-max endstop activated
     {% else %}  
       ## Z-hop befor homing - lift nozzle
       G91; set relative
       G0 Z{z_hop} F100 
       G90; set absolute
     {% endif %}

      ## restore speed
      #G1 F{act_speed}   
      G1 F30000
      
##### X homing ---------------------------------------------- 
   
    {% if "x" not in printer.toolhead.homed_axes %}
        {% if 'virtual_endstop' in  printer.configfile.config['stepper_x'].endstop_pin %}        
	      RESPOND MSG="Sensorless Homing X"
          ## Set current during  Home X    
          SET_TMC_CURRENT STEPPER=stepper_x CURRENT={home_current}     
          G4 P2000   ## Wait just a second… (give StallGuard registers time to clear)    

           {% if 'dual_carriage' in printer['motion_report'].steppers and 'virtual_endstop' in printer.configfile.config['dual_carriage'].endstop_pin %}   
              ## Set current during Home DUAL CARRIAGE - IDEX    
              SET_TMC_CURRENT STEPPER=dual_carriage  CURRENT={home_current}     
              G4 P2000   ## Wait just a second… (give StallGuard registers time to clear)  
           {% endif %}                   
               
          G28 X0
          ## Sets an offset of 10 mm from the end position
          G1 X{home_offset_x} F1200  
          M400
          ## Set current during print
          SET_TMC_CURRENT STEPPER=stepper_x CURRENT={run_current_x}
            
          {% if 'dual_carriage' in printer['motion_report'].steppers %}   
            ## Set current during print DUAL CARRIAGE - IDEX
            SET_TMC_CURRENT STEPPER=dual_carriage CURRENT={ run_current_dc}
          {% endif %}
            
        {% else %}
    	   RESPOND MSG="Endstop Homing X"
           G28 X0
       {% endif %}
    {% endif %}	
    
##### Y homing ---------------------------------------------- 
        
    {% if "y" not in printer.toolhead.homed_axes %}  
       {% if 'virtual_endstop' in printer.configfile.config['stepper_y'].endstop_pin %}
          RESPOND MSG="Sensorless Homing Y"
          ## Set current during  Home Y       
          SET_TMC_CURRENT STEPPER=stepper_y CURRENT={home_current}
          G4 P2000   ## Wait just a second… (give StallGuard registers time to clear)
          G28 Y0    
          ## Sets an offset of 10 mm from the end position
          G1 Y{home_offset_y} F1200   
          M400
          ## Set current during print
          SET_TMC_CURRENT STEPPER=stepper_y CURRENT={run_current_y}
       {% else %}
	      RESPOND MSG="Endstop Homing Y"
          G28 Y0
       {% endif %}
     {% endif %}

##### DUAL CARRIAGE - Open endstop for dual carriage ----------------------
    
     {% if 'dual_carriage' in printer['motion_report'].steppers %}    
        {% set axis = printer.configfile.settings.dual_carriage.axis %}     
        {% set endstop_open = ( (printer.configfile.config['dual_carriage'].position_endstop)|int -2 ) |abs %}

        RESPOND MSG="Open endstop for dual carriage"
       
        ## 'endstop_open' = gap (in mm) between toolhead and endstop when parking (mm)
        SET_DUAL_CARRIAGE CARRIAGE=1
        G1 {axis + endstop_open|string}  
       
        ## set extruder and carrriage with Z-probe 
        SET_DUAL_CARRIAGE CARRIAGE=0

       {%  if printer.toolhead.extruder != 'extruder' %} 
          ACTIVATE_EXTRUDER EXTRUDER=extruder 
       {% endif %} 
  
     {% endif %} 


##### Z homing ----------------------------------------------
       
    {% set msg = ("Probe Homing Z to position X %s Y %s" % (probe_pos_x,probe_pos_y)) %}
       RESPOND MSG='{msg}'         
       ## XY Location of the Z probe
       G0 X{probe_pos_x} Y{probe_pos_y} F7200   
       ## HOME Z
       G28 Z0   
       ## Elevator Z
       G0 Z{z_hop*2} F200      
     
##### Bed leveling  - if not applied -------------------------
     
       {% if 'z_tilt' in printer and not printer['z_tilt'].applied %}
          RESPOND MSG="Activate Z_TILT_ADJUST"
          Z_TILT_ADJUST
       {% elif 'quad_gantry_level' in printer and not printer['quad_gantry_level'].applied %}
          RESPOND MSG="Activate QUAD_GANTRY_LEVEL"
          QUAD_GANTRY_LEVEL
       {% endif %}

#####  Bed Mesh Adaptive - only when printing !  ------------
      
      {% if  printer['virtual_sdcard'].is_active == true %}  
        RESPOND MSG="Activate ADAPTIVE method for BED_MESH_CALIBRATE"
          {% if 'probe_eddy_current' in printer['probe'].name %}
            ## Rapid 
            BED_MESH_CALIBRATE METHOD=scan SCAN_MODE=rapid ADAPTIVE=1
          {% else %}  
            ## Classic 
            BED_MESH_CALIBRATE ADAPTIVE=1 
         {% endif %}
      {% endif %}      
         
##### RESET mode M605 to Auto-park mode S1 (default mode) ---------
    
      {% if 'gcode_macro M605' in printer %} 
	   RESPOND MSG="RESET mode M605 to Auto-park mode S1 (default mode)" 
       
	   ### Reset 'tool', 'toolhead' and 'tool_change' variable to default.
	   {% if 'gcode_macro _A_INIT_TOOL' in printer %} _A_INIT_TOOL   {% endif %} 
       {% if 'gcode_macro _B_INIT_TOOLHEAD' in printer %} _B_INIT_TOOLHEAD {% endif %} 
	   {% if 'gcode_macro _D_INIT_TOOL_CHANGE_PARAM' in printer %} _D_INIT_TOOL_CHANGE_PARAM {% endif %}
        
	   ### Reset 'idex_mode' and 'dual_carriage'  variable to default. 
	   {% if 'gcode_macro _INIT_IDEX_MODE' in printer %}  _INIT_IDEX_MODE {% endif %} 
	   {% if 'gcode_macro _INIT_DUAL_CARRIAGE' in printer %} _INIT_DUAL_CARRIAGE {% endif %} 
        
	   ### Reset 'offset_temp' variable to default.       
	   {% if 'gcode_macro _INIT_OFFSET_TEMP' in printer %} _INIT_OFFSET_TEMP {% endif %} 
             
       ### Reset all extruder movement  
       {% for tool in printer.motion_report.steppers|sort %} ; check for all available steppers
         {% if 'extruder' in tool %} 
           ### desynchronized from all extruder movement  
           SYNC_EXTRUDER_MOTION EXTRUDER={tool}  MOTION_QUEUE=   
           ### restore synchronized extruder movement 
           SYNC_EXTRUDER_MOTION EXTRUDER={tool}  MOTION_QUEUE={tool}   
         {% endif %}
       {% endfor %}
       
      ### Reset Switching extruder / hotend
       {%  if 'gcode_macro SWITCHING_EXTRUDER' in  printer  or  'gcode_macro SWITCHING_HOTEND' in  printer %}  
          ACTIVATE_TOOL  EXTRUDER={user_vars.toolhead[1][0]}  
          ACTIVATE_TOOL  EXTRUDER={user_vars.toolhead[0][0]} 
       {% endif %}   
		
	{% endif %} 

##### START PRINT position  --------------------------------------
    ##  XY Location               
       {% set msg = ("Moving to start position X %s Y %s" % (start_pos_x,start_pos_y)) %}
       RESPOND MSG='{msg}'      
         G0 {'X'+start_pos_x|string} {'Y'+start_pos_y|string} F7200
      {% if "z" not in printer.toolhead.homed_axes %}  
         ## HOME Z
         G28 Z0   
         ## Elevator Z
         G0 Z{z_hop*2} F200 
      {% endif %}     
       
       #G1 F{act_speed}
       G0 F3000



