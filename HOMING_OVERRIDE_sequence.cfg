### printer.cfg 

###  Z-max endstop
[gcode_button z_max]   ## -- don't change name! --   
pin:  ^PC0   ## Z-STOP         
press_gcode:  

#########################################
##       USER HOMING SEQUENCE          
##
##    for this cfg:  
##  - Endstop position
##  - Sensorless 
##  - Dual Carriage ( IDEX printer )
##  - Z-max endstop ( safety endstop ) 
##
#########################################

[homing_override]
axes: z
set_position_z: 0
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
   #{% set act_speed = printer.gcode_move.speed %}   
      
    ##### get user defines X/Y position for "Z probe"    
    {% set probe_pos_x = (printer.configfile.config['stepper_x'].position_max)|int / 2 - (printer.configfile.config[printer['probe'].name].x_offset)|float %}
    {% set probe_pos_y = (printer.configfile.config['stepper_y'].position_max)|int / 2 - (printer.configfile.config[printer['probe'].name].y_offset)|float %}
    {% set z_hop = 5 %}
    {% set max_z_velocity = printer.configfile.config['printer'].max_z_velocity %}
    
    ##### get user defines sensorless homing
    {% set home_offset_x = ( (printer.configfile.config['stepper_x'].position_endstop)|int -10 ) |abs %}
    {% set home_offset_y = ( (printer.configfile.config['stepper_y'].position_endstop)|int -10 ) |abs %}
    {% set run_current_x = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set run_current_y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set home_current = 0.600 %}     
    
     ##### get user defines sensorless homing for DUAL CARRIAGE - IDEX
     {% if 'dual_carriage' in printer['motion_report'].steppers %}   
        {% set run_current_dc = printer.configfile.settings['tmc2209 dual_carriage'].run_current|float %}
    {% endif %}
	    

    ##### Z-hop befor homing - safe lift nozzle ------------------
     
    {% if 'gcode_button z_max' in printer and printer['gcode_button z_max'].state == 'PRESSED' %} 
       ## info: QUERY_BUTTON button=z_max    RELEASED / PRESSED
       ## no Z-hop befor homing - Z-max endstop activated
     {% else %}  
       ## Z-hop befor homing - lift nozzle
       G91; set relative
       G0 Z{z_hop} F100 
       G90; set absolute
    {% endif %}

      ## restore speed
      #G1 F{act_speed}   
       G1 F30000
    
     # endstop_pin: tmc2209_stepper_x:virtual_endstop
     # endstop_pin: tmc2209_stepper_y:virtual_endstop
     # endstop_pin: tmc2209_dual_carriage:virtual_endstop
     
      ##### X homing ---------------------------------------------- 
   
    {% if "x" not in printer.toolhead.homed_axes %}
         {% if 'virtual_endstop' in  printer.configfile.config['stepper_x'].endstop_pin %}        
	  RESPOND MSG="Sensorless Homing X"
           ## Set current during  Home X    
           SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}     
           G4 P2000   ## Wait just a second… (give StallGuard registers time to clear)    

              {% if 'virtual_endstop' in printer.configfile.config['dual_carriage'].endstop_pin %}   
                  ## Set current during Home DUAL CARRIAGE - IDEX    
                  SET_TMC_CURRENT STEPPER=dual_carriage  CURRENT={HOME_CURRENT}     
                  G4 P2000   ## Wait just a second… (give StallGuard registers time to clear)  
               {% endif %}                   
               
           G28 X0
           ## Sets an offset of 10 mm from the end position
           G1 X{home_offset_x} F1200  
           ## Set current during print
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
            
            {% if 'dual_carriage' in printer['motion_report'].steppers %}   
                ## Set current during print DUAL CARRIAGE - IDEX
                SET_TMC_CURRENT STEPPER=dual_carriage CURRENT={RUN_CURRENT_DC}
            {% endif %}
            
        {% else %}
	RESPOND MSG="Endstop Homing X"
          G28 X0
       {% endif %}
  {% endif %}	
    
        ##### Y homing ---------------------------------------------- 
        
    {% if "y" not in printer.toolhead.homed_axes %}  
        {% if 'virtual_endstop' in printer.configfile.config['stepper_y'].endstop_pin %}
            RESPOND MSG="Sensorless Homing Y"
            ## Set current during  Home Y       
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
            G4 P2000   ## Wait just a second… (give StallGuard registers time to clear)
            G28 Y0    
           ## Sets an offset of 10 mm from the end position
            G1 Y{home_offset_y} F1200   
           ## Set current during print
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
        {% else %}
	  RESPOND MSG="Endstop Homing Y"
          G28 Y0
       {% endif %}
  {% endif %}

    ##### DUAL CARRIAGE - Open endstop for dual carriage ----------------------
    
     {% if 'dual_carriage' in printer['motion_report'].steppers %}    
        {% set axis = printer.configfile.settings.dual_carriage.axis %}     
        {% set endstop_open = ( (printer.configfile.config['dual_carriage'].position_endstop)|int -2 ) |abs %}

        RESPOND MSG="Open endstop for dual carriage"
       
       ## 'endstop_open' = gap (in mm) between toolhead and endstop when parking (mm)
       SET_DUAL_CARRIAGE CARRIAGE=1
        G1 {axis + endstop_open|string}  
       
       ## set extruder and carrriage with Z-probe 
       SET_DUAL_CARRIAGE CARRIAGE=0

       {%  if printer.toolhead.extruder != 'extruder' %} 
          ACTIVATE_EXTRUDER EXTRUDER=extruder 
       {% endif %} 
  
     {% endif %} 


     ##### Z homing ----------------------------------------------
       
    {% set msg = ("Probe Homing Z to position X%s Y%s" % (probe_pos_x,probe_pos_y)) %}
       RESPOND MSG='{msg}'         
       ## XY Location of the Z probe
       G0 X{probe_pos_x} Y{probe_pos_y} F7200   
       ## HOME Z
       G28 Z0   
       ## Elevator Z
       G0 Z{z_hop*2} F200      
     
     ##### Bed leveling  ----------------------------------------------
     
       {% if 'z_tilt' in printer and not printer['z_tilt'].applied %}
          RESPOND MSG="Activate Z_TILT_ADJUST"
          Z_TILT_ADJUST
       {% elif 'quad_gantry_level' in printer and not printer['quad_gantry_level'].applied %}
          RESPOND MSG="Activate QUAD_GANTRY_LEVEL"
          QUAD_GANTRY_LEVEL
       {% endif %}

     #####  Bed Mesh Adaptive Scan - only when printing !  ------------
      
      {% if  printer['virtual_sdcard'].is_active == true %}  
        RESPOND MSG="Activate ADAPTIVE method for BED_MESH_CALIBRATE"
          {% if 'probe_eddy_current' in printer['probe'].name %}
            ## Rapid 
             BED_MESH_CALIBRATE METHOD=scan SCAN_MODE=rapid ADAPTIVE=1
          {% else %}  
            ## Classic 
            BED_MESH_CALIBRATE ADAPTIVE=1 
         {% endif %}
      {% endif %}
      
       
       ##### START PRINT position  --------------------------------------
       
       RESPOND MSG="Moving to center Bed position" 
       ## XY Location of the Z probe
        G0 X{probe_pos_x} Y{probe_pos_y} F7200   
        
      {% if "z" not in printer.toolhead.homed_axes %}  
         ## HOME Z
           G28 Z0   
         ## Elevator Z
            G0 Z{z_hop*2} F200 
       {% endif %}     
       
        #G1 F{act_speed}
         G0 F3000
         
         
       ##### RESET mode M605 to Auto-park mode S1 (default mode) ---------
    
     {%  if 'gcode_macro M605' in printer %} 
         RESPOND MSG="RESET mode M605 to Auto-park mode S1 (default mode)" 
        
        ### Auto-park mode S1 (default mode)
         {% set _dummy =user_vars.idex_mode.update( {'active' : 1, 'carriage_offset' : 0} ) %}  
         {% set _dummy =user_vars.dual_carriage.update( {'auto_exchange':True} ) %}  
     
        ### reset variable after disable carriage in S2,S3 mode
         {% set _dummy = user_vars.tool_change.update( {'enable' : True } ) %}           

        ### reset offset_temp
         {% set tool_0   =   user_vars.toolhead[0][0]   %}    # carriage 0 / tool 0  e.g. 'extruder' 
         {% set tool_1   =   user_vars.toolhead[1][0]   %}    # carriage 1 / tool 0  e.g. 'extruder2'         
         {% set _dummy = user_vars.offset_temp.update({tool_0: 0.0, tool_1: 0.0}) %}                         
         {% if user_vars.tool|length == 4  %}
           ### offset temp for 4 extruder (4EX2 printer)
           {%  set tool_2   =   user_vars.toolhead[0][1]   %}    # carriage 0 / tool 1  e.g. 'extruder1 
           {%  set tool_3   =   user_vars.toolhead[1][1]   %}    # carriage 1 / tool 1  e.g. 'extruder3'  
           {% set _dummy = user_vars.offset_temp.update({tool_2: 0.0, tool_3: 0.0}) %}          
         {% endif %} 

        ### update  variable
         SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=tool_change  VALUE="{user_vars.tool_change}"  
         SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=idex_mode      VALUE="{user_vars.idex_mode}"  
         SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=dual_carriage  VALUE="{user_vars.dual_carriage}"  
         SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=offset_temp    VALUE="{user_vars.offset_temp}"   

        ### Reset all extruder to default 
         DEFAULT_EXTRUDER_SETTINGS       
     {% endif %}         
         






