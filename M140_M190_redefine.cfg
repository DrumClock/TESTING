#####################################################################
#  Variable for this configurations
#  ATTENTION: If the variable already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_bed_temp: { }     # e.g. {'sensor': 'bed_plate', 'delta_array': {50: 0, 60: 3, 70: 4, 80: 5, 90: 7, 100: 9, 110: 12}, 'offset_target': 0.5}   

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_DELTA_BED_TEMP]
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
   
    ### init defautl variable
   {% set name = "bed_temp" %}    # name variable
   {% set init = { } %}     # default preset   
  
    #{% set sensor = "bed_plate" %}     ## external sensor name (default set "heater_bed")
    {% set delta_array = {50:0, 60:3, 70:4, 80:5, 90:7, 100:9, 110:12 } %}    ## array temperature / delta value  
    {% set offset_target = 0.5 %}      ## delta temperature within target is considered as reached
  
    {% set _dummy = init.update({'sensor':sensor|default("heater_bed"), 'delta_array':delta_array, 'offset_target':offset_target }) %} 
  
   ### save variable 
   SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"  
   
  {action_respond_info("Creating a list of variables for macro M140/M190") if printer.save_variables.variables.dump_list }

##########################################################
# TOOL HEATERS MANAGEMENT 
# Redefine G-code command M140 and M190 
#
# Use an external sensor to get the bed surface closer to the set target temp
# Usage: SET_BED_HEATER TEMP=<temp> [WAIT=<0|1>]
# TEMP: Temperature of the print surface
# WAIT: 1 means wait until temperature is within limits
#
##########################################################

[gcode_macro M140]
rename_existing: M140.1
gcode: 
        SET_BED_HEATER  TEMP={params.S|default(0)} WAIT=0

#####################################################################

[gcode_macro M190]
rename_existing: M190.1
gcode:  
        SET_BED_HEATER  TEMP={params.S|default(0)} WAIT=1

#####################################################################

[gcode_macro SET_BED_HEATER ]
description: Use an external sensor to mesure the bed temp
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %} 
  
  ##### get input paramter #####
  {% set temp = params.TEMP|default(0)|float %} 
  {% set wait = params.WAIT|default(0)|int %}
  {% set ns = namespace(delta_temp=0) %}
   
  ##### check that the temperature sensor 
   {% if user_vars.bed_temp.sensor == "heater_bed" %}
     ##### define for default hetaer_bed sensor
     {% set ns.delta_temp = 0.0 %}
     {% set sensor = user_vars.bed_temp.sensor %}
   {% else %}  
     ##### define for external sensor name 
     {% set sensor = ("temperature_sensor %s"  %   user_vars.bed_temp.sensor) %}
     ##### define delta_temp for heater bed      
     {% set delta_max = user_vars.bed_temp.delta_array|max %}
     {% set delta_min = user_vars.bed_temp.delta_array|min %}
       
     {% if temp  >  delta_max %}
       {% set ns.delta_temp = user_vars.bed_temp.delta_array[delta_max|int] %}
     {% elif temp  <  delta_min %}  
       {% set ns.delta_temp = user_vars.bed_temp.delta_array[delta_min|int] %}
     {% else %} 
       {% for delta in user_vars.bed_temp.delta_array|sort %}  ; check for eg. 'delta_array' = {50: 0, 60: 3, 70: 4, 80: 5, 90: 7, 100: 9, 110: 12}
         {% if temp > delta -1 and temp < delta + 10 %}     
          {% set ns.delta_temp = user_vars.bed_temp.delta_array[delta|int] %}    
         {% endif %}
       {% endfor %}
     {% endif %}
        {action_respond_info("heater_temp = %s  ( target_temp= %s + delta_temp= %s )" % (heater_temp,temp, ns.delta_temp))} 
   {% endif %}

  ##### check that the temperature is lower than the max_temp #####  
  {% set heater_temp = (temp + ns.delta_temp) if temp > 0 else 0 %}

  {% if heater_temp <  printer.configfile.settings.heater_bed.max_temp|float|round(1) %}    
    SET_HEATER_TEMPERATURE HEATER=heater_bed  TARGET={heater_temp}
    {% if wait == 1 and heater_temp > 0.0 %}
      TEMPERATURE_WAIT SENSOR="{sensor}"  MINIMUM={ heater_temp - user_vars.bed_temp.offset_target  }    MAXIMUM={ heater_temp + user_vars.bed_temp.offset_target  }
    {% endif %}
  {% else %}
    {action_respond_info("Aborted, target %3.1f\u00B0C exedes max_temp config limit" % heater_temp)}
  {% endif %}
  
#####################################################################

##########################################################
# SET_DELTA_BED_TEMP - MANAGEMENT 
#
# For add or change item in 'delta_array' use:  SET_DELTA_BED_TEMP  DELTA=50:3
# For delete item in 'delta_array' temp use:    SET_DELTA_BED_TEMP  DELTA=50:-1
# 
##########################################################      

[gcode_macro SET_DELTA_BED_TEMP]
description: SET_DELTA_BED_TEMP   SENSOR=bed_plate   DELTA=50:3   OFFSET=0.5
gcode:  
   
    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set name = "bed_temp" %}    # name variable
    {% set init = user_vars[name] %}   


 {% if not params %}
    ### no params defined
    {action_respond_info("Actual settings:  SENSOR=%s    DELTA=%s     OFFSET=%s " % (init.sensor, init.delta_array, init.offset_target))}  
    {action_respond_info("The SENSOR, DELTA, or OFFSET parameters are not defined for the  SET_DELTA_BED_TEMP command")}      
    
 {% else %}      
     {% set SENSOR_param=params.SENSOR|default("heater_bed") if params.SENSOR is defined else -1 %}
     {% set DELTA_param=params.DELTA|default({50:0}) if params.DELTA is defined else -1 %}
     {% set OFFSET_param=params.OFFSET|default(0.5) if params.OFFSET is defined else -1 %}
       
     {% for key in params %}          
        {% if key|lower =='delta' %}    
          {% if DELTA_param.split(":")|length == 2 %}
            {% set temp = (DELTA_param.split(':')[0])|int %}
            {% set delta = (DELTA_param.split(':')[1])|int %}    
            
            {% if delta == -1 %} 
               # deleting item in 'delta_array'
               {% set _dummy = init.delta_array.pop( temp ) %}
            {% else %}  
               # add or update item in 'delta_array'
               {% set _dummy = init.delta_array.update( {temp:delta} ) %}
            {% endif %}            
          {% else %}
            RESPOND MSG="example: SET_DELTA_BED_TEMP   DELTA=50:3" 
            RESPOND MSG="The DELTA parameter is incorrectly defined, the default setting is used." 
        {% endif %}   
              
        {% elif  key|lower =='offset' %} 
           {% set _dummy = init.update( {'offset_target' : OFFSET_param|float} )  %}
              
        {% elif  key|lower =='sensor' %}        
           {% set _dummy = init.update( { 'sensor': SENSOR_param} ) %}      
              
        {% endif %}          
      {% endfor %}      
     
      ### update variable 
        SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name}  VALUE="{init}" 
          
 {% endif %}  

  


    
