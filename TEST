[gcode_macro VARIABLE]
gcode:  

variable_aaaa : {'gap': {'mode_copy': 134, 'mode_mirror': 309} } 

#-----------------------------------------

[gcode_macro GAP]
gcode:  

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set name = "aaaa" %}    # name variable
    {% set init = user_vars[name] %}  # default preset     
       
    {action_respond_info("mode_mirror %s " %   (init.gap.mode_mirror))}  
    {action_respond_info("mode_copy %s " %   (init.gap.mode_copy))}  
    

     {% set axis = printer.configfile.settings.dual_carriage.axis %}
     
     {% set X_max = [(init.gap.mode_copy|int), (printer.configfile.config[('stepper_'+axis)].position_max|int /2)|int ]|max %}
     
     {% set X_min = (printer.configfile.config['dual_carriage'].safe_distance)|int 
                 if printer.configfile.config['dual_carriage'].safe_distance is defined
               else ( printer.configfile.config[('stepper_'+axis)].position_min|int) |abs %}
     
     {action_respond_info("X_max %s " %   (X_max))} 
     {action_respond_info("X_min %s " %   (X_min))} 

######################################################################################################


[gcode_macro VARIABLE]
gcode:  

variable_asdf : { } 

#-----------------------------------------

[gcode_macro _INIT_GAP]
gcode:  

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set name = "asdf" %}    # name variable
    {% set init = user_vars[name] %}  # default preset   
  
  ### user-defined gap between carriages for COPY and MIRROR modes
   {% set _dummy = init.update( {'pos_carriage_0':-41 , 'gap': {'copy':134, 'mirror':309}, 'offset_dual':0 } ) %}    
 
   {% set msg1 = ("user-defined = %s " % (init)) %}
          RESPOND MSG='{msg1}'    

 #--------------- init >> user_vars.idex_mode ---------------------------------------------------------

    {% set axis = printer.configfile.settings.dual_carriage.axis %} 

  ### dupl_min
    {% if printer.configfile.config['dual_carriage'].safe_distance is defined %}
      {% set dupl_min = (printer.configfile.config['dual_carriage'].safe_distance)|int %}
    {% else %} 
      {% set dupl_min =  ( printer.configfile.config[('stepper_'+axis)].position_min|int) |abs %} 
    {% endif %}
    
    {% set _dummy = init.gap.update({'copy_min': dupl_min|int }) %}
    

  ### dupl_max, mirrored 
    {% set pos_carriage_0 = [ (init.pos_carriage_0|int), 0|int ]|min %}
    {% set _dummy = init.update( {'pos_carriage_0':pos_carriage_0   } ) %} 
   
    {% set dupl_max =    [ (init.gap.copy|int),  (printer.configfile.config[('stepper_'+axis)].position_max|int /2)|int ]|max %}    
    {% set mirrored =    [ (init.gap.mirror|int), (printer.configfile.config[('stepper_'+axis)].position_max|int)|int ]|max %}

    {% set _dummy = init.gap.update( {'copy_max': dupl_max|int , 'mirror': mirrored|int } ) %}
      
     ### update the variable
     SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"      

     {% set msg2 = ("Final gap = %s " % (user_vars.asdf)) %}
          RESPOND MSG='{msg2}'  
          

[gcode_macro SAFETY]
gcode:  

    {% set user_vars = printer["gcode_macro VARIABLE"] %} 
    {% set name = "asdf" %}    # name variable
    {% set init = user_vars[name] %}  # default preset   
  
  #-----------  safety test for parameter X  --------------------------------------------------------------
  
    {% set offset_dual = params.X|default(init.gap.copy_max)|int %} 
     {% set msg = ("params.X = %s " % (offset_dual)) %}
          RESPOND MSG='{msg}'

    {action_respond_info("copy_min %s " % (init.gap.copy_min))}  
    {action_respond_info("copy_max %s " % (init.gap.copy_max))}  
    {action_respond_info("mirror %s " %   (init.gap.mirror))}  

    {action_respond_info("copy %s " %   (init.gap.copy))}  
    

#[gcode_macro _dummy]
#gcode:  
    
    ### safety test for parameter X 
      {% if  offset_dual <  init.gap.copy_min  or   offset_dual >  init.gap.copy_max %}
         #{action_respond_info("The distance between dual carriages must be %s - %s " % ( init.gap.copy_min, init.gap.copy))}
        {% set msg = ("The distance between dual carriages must be %s - %s " % (init.gap.copy_min, init.gap.copy_max)) %}
          RESPOND MSG='{msg}'     
        
        {% set offset_dual = init.gap.copy_max %} 
         #{action_respond_info("Will now be set to : %s " % ( init.gap.copy))}
        
        {% set msg = ("Will now be set to : %s " % ( init.gap.copy_max)) %}
          RESPOND MSG='{msg}'
          
      {% else  %}  
        ###  set carriage offset for mode S2
        {% set pos_carriage_1 = init.pos_carriage_0 + offset_dual %} 
        {% set _dummy = init.update( {'pos_carriage_1':pos_carriage_1|int  } ) %} 
        {% set _dummy = init.update( {'offset_dual': offset_dual|int  } ) %}  
       
        
          #{action_respond_info("The distance between dual carriages set to : %s " % ( offset_dual))}
           {% set msg = ("The distance between dual carriages set to : %s " % ( offset_dual)) %}
          RESPOND MSG='{msg}'
        
      {% endif %}    

       ### update the variable
     SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name} VALUE="{init}"
      
   #----------------------------------------------------------------------------   
      
         {% set msg2 = ("Final init = %s " % (init)) %}
          RESPOND MSG='{msg2}'     
       
    
